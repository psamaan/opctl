// This file was generated by counterfeiter
package main

import "sync"

type fakeCompositionRoot struct {
  CreateCollectionUseCaseStub                func() createCollectionUseCase
  createCollectionUseCaseMutex               sync.RWMutex
  createCollectionUseCaseArgsForCall         []struct{}
  createCollectionUseCaseReturns             struct {
                                               result1 createCollectionUseCase
                                             }
  CreateOpUseCaseStub                        func() createOpUseCase
  createOpUseCaseMutex                       sync.RWMutex
  createOpUseCaseArgsForCall                 []struct{}
  createOpUseCaseReturns                     struct {
                                               result1 createOpUseCase
                                             }
  KillOpRunUseCaseStub                       func() killOpRunUseCase
  killOpRunUseCaseMutex                      sync.RWMutex
  killOpRunUseCaseArgsForCall                []struct{}
  killOpRunUseCaseReturns                    struct {
                                               result1 killOpRunUseCase
                                             }
  ListOpsInCollectionUseCaseStub             func() listOpsInCollectionUseCase
  listOpsInCollectionUseCaseMutex            sync.RWMutex
  listOpsInCollectionUseCaseArgsForCall      []struct{}
  listOpsInCollectionUseCaseReturns          struct {
                                               result1 listOpsInCollectionUseCase
                                             }
  RunOpUseCaseStub                           func() runOpUseCase
  runOpUseCaseMutex                          sync.RWMutex
  runOpUseCaseArgsForCall                    []struct{}
  runOpUseCaseReturns                        struct {
                                               result1 runOpUseCase
                                             }
  SetCollectionDescriptionUseCaseStub        func() setCollectionDescriptionUseCase
  setCollectionDescriptionUseCaseMutex       sync.RWMutex
  setCollectionDescriptionUseCaseArgsForCall []struct{}
  setCollectionDescriptionUseCaseReturns     struct {
                                               result1 setCollectionDescriptionUseCase
                                             }
  SetOpDescriptionUseCaseStub                func() setOpDescriptionUseCase
  setOpDescriptionUseCaseMutex               sync.RWMutex
  setOpDescriptionUseCaseArgsForCall         []struct{}
  setOpDescriptionUseCaseReturns             struct {
                                               result1 setOpDescriptionUseCase
                                             }
  StreamEventsUseCaseStub                    func() streamEventsUseCase
  streamEventsUseCaseMutex                   sync.RWMutex
  streamEventsUseCaseArgsForCall             []struct{}
  streamEventsUseCaseReturns                 struct {
                                               result1 streamEventsUseCase
                                             }
  invocations                                map[string][][]interface{}
  invocationsMutex                           sync.RWMutex
}

func (fake *fakeCompositionRoot) CreateCollectionUseCase() createCollectionUseCase {
  fake.createCollectionUseCaseMutex.Lock()
  fake.createCollectionUseCaseArgsForCall = append(fake.createCollectionUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("CreateCollectionUseCase", []interface{}{})
  fake.createCollectionUseCaseMutex.Unlock()
  if fake.CreateCollectionUseCaseStub != nil {
    return fake.CreateCollectionUseCaseStub()
  } else {
    return fake.createCollectionUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) CreateCollectionUseCaseCallCount() int {
  fake.createCollectionUseCaseMutex.RLock()
  defer fake.createCollectionUseCaseMutex.RUnlock()
  return len(fake.createCollectionUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) CreateCollectionUseCaseReturns(result1 createCollectionUseCase) {
  fake.CreateCollectionUseCaseStub = nil
  fake.createCollectionUseCaseReturns = struct {
    result1 createCollectionUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) CreateOpUseCase() createOpUseCase {
  fake.createOpUseCaseMutex.Lock()
  fake.createOpUseCaseArgsForCall = append(fake.createOpUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("CreateOpUseCase", []interface{}{})
  fake.createOpUseCaseMutex.Unlock()
  if fake.CreateOpUseCaseStub != nil {
    return fake.CreateOpUseCaseStub()
  } else {
    return fake.createOpUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) CreateOpUseCaseCallCount() int {
  fake.createOpUseCaseMutex.RLock()
  defer fake.createOpUseCaseMutex.RUnlock()
  return len(fake.createOpUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) CreateOpUseCaseReturns(result1 createOpUseCase) {
  fake.CreateOpUseCaseStub = nil
  fake.createOpUseCaseReturns = struct {
    result1 createOpUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) KillOpRunUseCase() killOpRunUseCase {
  fake.killOpRunUseCaseMutex.Lock()
  fake.killOpRunUseCaseArgsForCall = append(fake.killOpRunUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("KillOpRunUseCase", []interface{}{})
  fake.killOpRunUseCaseMutex.Unlock()
  if fake.KillOpRunUseCaseStub != nil {
    return fake.KillOpRunUseCaseStub()
  } else {
    return fake.killOpRunUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) KillOpRunUseCaseCallCount() int {
  fake.killOpRunUseCaseMutex.RLock()
  defer fake.killOpRunUseCaseMutex.RUnlock()
  return len(fake.killOpRunUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) KillOpRunUseCaseReturns(result1 killOpRunUseCase) {
  fake.KillOpRunUseCaseStub = nil
  fake.killOpRunUseCaseReturns = struct {
    result1 killOpRunUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) ListOpsInCollectionUseCase() listOpsInCollectionUseCase {
  fake.listOpsInCollectionUseCaseMutex.Lock()
  fake.listOpsInCollectionUseCaseArgsForCall = append(fake.listOpsInCollectionUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("ListOpsInCollectionUseCase", []interface{}{})
  fake.listOpsInCollectionUseCaseMutex.Unlock()
  if fake.ListOpsInCollectionUseCaseStub != nil {
    return fake.ListOpsInCollectionUseCaseStub()
  } else {
    return fake.listOpsInCollectionUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) ListOpsInCollectionUseCaseCallCount() int {
  fake.listOpsInCollectionUseCaseMutex.RLock()
  defer fake.listOpsInCollectionUseCaseMutex.RUnlock()
  return len(fake.listOpsInCollectionUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) ListOpsInCollectionUseCaseReturns(result1 listOpsInCollectionUseCase) {
  fake.ListOpsInCollectionUseCaseStub = nil
  fake.listOpsInCollectionUseCaseReturns = struct {
    result1 listOpsInCollectionUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) RunOpUseCase() runOpUseCase {
  fake.runOpUseCaseMutex.Lock()
  fake.runOpUseCaseArgsForCall = append(fake.runOpUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("RunOpUseCase", []interface{}{})
  fake.runOpUseCaseMutex.Unlock()
  if fake.RunOpUseCaseStub != nil {
    return fake.RunOpUseCaseStub()
  } else {
    return fake.runOpUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) RunOpUseCaseCallCount() int {
  fake.runOpUseCaseMutex.RLock()
  defer fake.runOpUseCaseMutex.RUnlock()
  return len(fake.runOpUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) RunOpUseCaseReturns(result1 runOpUseCase) {
  fake.RunOpUseCaseStub = nil
  fake.runOpUseCaseReturns = struct {
    result1 runOpUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) SetCollectionDescriptionUseCase() setCollectionDescriptionUseCase {
  fake.setCollectionDescriptionUseCaseMutex.Lock()
  fake.setCollectionDescriptionUseCaseArgsForCall = append(fake.setCollectionDescriptionUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("SetCollectionDescriptionUseCase", []interface{}{})
  fake.setCollectionDescriptionUseCaseMutex.Unlock()
  if fake.SetCollectionDescriptionUseCaseStub != nil {
    return fake.SetCollectionDescriptionUseCaseStub()
  } else {
    return fake.setCollectionDescriptionUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) SetCollectionDescriptionUseCaseCallCount() int {
  fake.setCollectionDescriptionUseCaseMutex.RLock()
  defer fake.setCollectionDescriptionUseCaseMutex.RUnlock()
  return len(fake.setCollectionDescriptionUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) SetCollectionDescriptionUseCaseReturns(result1 setCollectionDescriptionUseCase) {
  fake.SetCollectionDescriptionUseCaseStub = nil
  fake.setCollectionDescriptionUseCaseReturns = struct {
    result1 setCollectionDescriptionUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) SetOpDescriptionUseCase() setOpDescriptionUseCase {
  fake.setOpDescriptionUseCaseMutex.Lock()
  fake.setOpDescriptionUseCaseArgsForCall = append(fake.setOpDescriptionUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("SetOpDescriptionUseCase", []interface{}{})
  fake.setOpDescriptionUseCaseMutex.Unlock()
  if fake.SetOpDescriptionUseCaseStub != nil {
    return fake.SetOpDescriptionUseCaseStub()
  } else {
    return fake.setOpDescriptionUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) SetOpDescriptionUseCaseCallCount() int {
  fake.setOpDescriptionUseCaseMutex.RLock()
  defer fake.setOpDescriptionUseCaseMutex.RUnlock()
  return len(fake.setOpDescriptionUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) SetOpDescriptionUseCaseReturns(result1 setOpDescriptionUseCase) {
  fake.SetOpDescriptionUseCaseStub = nil
  fake.setOpDescriptionUseCaseReturns = struct {
    result1 setOpDescriptionUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) StreamEventsUseCase() streamEventsUseCase {
  fake.streamEventsUseCaseMutex.Lock()
  fake.streamEventsUseCaseArgsForCall = append(fake.streamEventsUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("StreamEventsUseCase", []interface{}{})
  fake.streamEventsUseCaseMutex.Unlock()
  if fake.StreamEventsUseCaseStub != nil {
    return fake.StreamEventsUseCaseStub()
  } else {
    return fake.streamEventsUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) StreamEventsUseCaseCallCount() int {
  fake.streamEventsUseCaseMutex.RLock()
  defer fake.streamEventsUseCaseMutex.RUnlock()
  return len(fake.streamEventsUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) StreamEventsUseCaseReturns(result1 streamEventsUseCase) {
  fake.StreamEventsUseCaseStub = nil
  fake.streamEventsUseCaseReturns = struct {
    result1 streamEventsUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.createCollectionUseCaseMutex.RLock()
  defer fake.createCollectionUseCaseMutex.RUnlock()
  fake.createOpUseCaseMutex.RLock()
  defer fake.createOpUseCaseMutex.RUnlock()
  fake.killOpRunUseCaseMutex.RLock()
  defer fake.killOpRunUseCaseMutex.RUnlock()
  fake.listOpsInCollectionUseCaseMutex.RLock()
  defer fake.listOpsInCollectionUseCaseMutex.RUnlock()
  fake.runOpUseCaseMutex.RLock()
  defer fake.runOpUseCaseMutex.RUnlock()
  fake.setCollectionDescriptionUseCaseMutex.RLock()
  defer fake.setCollectionDescriptionUseCaseMutex.RUnlock()
  fake.setOpDescriptionUseCaseMutex.RLock()
  defer fake.setOpDescriptionUseCaseMutex.RUnlock()
  fake.streamEventsUseCaseMutex.RLock()
  defer fake.streamEventsUseCaseMutex.RUnlock()
  return fake.invocations
}

func (fake *fakeCompositionRoot) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}
