// This file was generated by counterfeiter
package main

import (
  "sync"

  "github.com/opspec-io/cli/core"
)

type fakeCompositionRoot struct {
  CoreApiStub        func() core.Api
  coreApiMutex       sync.RWMutex
  coreApiArgsForCall []struct{}
  coreApiReturns     struct {
                       result1 core.Api
                     }
  invocations        map[string][][]interface{}
  invocationsMutex   sync.RWMutex
}

func (fake *fakeCompositionRoot) CoreApi() core.Api {
  fake.coreApiMutex.Lock()
  fake.coreApiArgsForCall = append(fake.coreApiArgsForCall, struct{}{})
  fake.recordInvocation("CoreApi", []interface{}{})
  fake.coreApiMutex.Unlock()
  if fake.CoreApiStub != nil {
    return fake.CoreApiStub()
  } else {
    return fake.coreApiReturns.result1
  }
}

func (fake *fakeCompositionRoot) CoreApiCallCount() int {
  fake.coreApiMutex.RLock()
  defer fake.coreApiMutex.RUnlock()
  return len(fake.coreApiArgsForCall)
}

func (fake *fakeCompositionRoot) CoreApiReturns(result1 core.Api) {
  fake.CoreApiStub = nil
  fake.coreApiReturns = struct {
    result1 core.Api
  }{result1}
}

func (fake *fakeCompositionRoot) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.coreApiMutex.RLock()
  defer fake.coreApiMutex.RUnlock()
  return fake.invocations
}

func (fake *fakeCompositionRoot) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}
