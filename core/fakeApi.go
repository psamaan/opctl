// This file was generated by counterfeiter
package core

import (
  "sync"
)

type FakeApi struct {
  CreateCollectionStub                func(description string, name string)
  createCollectionMutex               sync.RWMutex
  createCollectionArgsForCall         []struct {
    description string
    name        string
  }
  CreateOpStub                        func(description string, name string)
  createOpMutex                       sync.RWMutex
  createOpArgsForCall                 []struct {
    description string
    name        string
  }
  KillOpRunStub                          func(opRunId string)
  killOpRunMutex                         sync.RWMutex
  killOpRunArgsForCall                   []struct {
    opRunId string
  }
  ListOpsInCollectionStub             func()
  listOpsInCollectionMutex            sync.RWMutex
  listOpsInCollectionArgsForCall      []struct{}
  RunOpStub                           func(args []string, name string)
  runOpMutex                          sync.RWMutex
  runOpArgsForCall                    []struct {
    args []string
    name string
  }
  SetCollectionDescriptionStub        func(description string)
  setCollectionDescriptionMutex       sync.RWMutex
  setCollectionDescriptionArgsForCall []struct {
    description string
  }
  SetOpDescriptionStub                func(description string, name string)
  setOpDescriptionMutex               sync.RWMutex
  setOpDescriptionArgsForCall         []struct {
    description string
    name        string
  }
  StreamEventsStub                    func()
  streamEventsMutex                   sync.RWMutex
  streamEventsArgsForCall             []struct{}
  invocations                         map[string][][]interface{}
  invocationsMutex                    sync.RWMutex
}

func (fake *FakeApi) CreateCollection(description string, name string) {
  fake.createCollectionMutex.Lock()
  fake.createCollectionArgsForCall = append(fake.createCollectionArgsForCall, struct {
    description string
    name        string
  }{description, name})
  fake.recordInvocation("CreateCollection", []interface{}{description, name})
  fake.createCollectionMutex.Unlock()
  if fake.CreateCollectionStub != nil {
    fake.CreateCollectionStub(description, name)
  }
}

func (fake *FakeApi) CreateCollectionCallCount() int {
  fake.createCollectionMutex.RLock()
  defer fake.createCollectionMutex.RUnlock()
  return len(fake.createCollectionArgsForCall)
}

func (fake *FakeApi) CreateCollectionArgsForCall(i int) (string, string) {
  fake.createCollectionMutex.RLock()
  defer fake.createCollectionMutex.RUnlock()
  return fake.createCollectionArgsForCall[i].description, fake.createCollectionArgsForCall[i].name
}

func (fake *FakeApi) CreateOp(description string, name string) {
  fake.createOpMutex.Lock()
  fake.createOpArgsForCall = append(fake.createOpArgsForCall, struct {
    description string
    name        string
  }{description, name})
  fake.recordInvocation("CreateOp", []interface{}{description, name})
  fake.createOpMutex.Unlock()
  if fake.CreateOpStub != nil {
    fake.CreateOpStub(description, name)
  }
}

func (fake *FakeApi) CreateOpCallCount() int {
  fake.createOpMutex.RLock()
  defer fake.createOpMutex.RUnlock()
  return len(fake.createOpArgsForCall)
}

func (fake *FakeApi) CreateOpArgsForCall(i int) (string, string) {
  fake.createOpMutex.RLock()
  defer fake.createOpMutex.RUnlock()
  return fake.createOpArgsForCall[i].description, fake.createOpArgsForCall[i].name
}

func (fake *FakeApi) KillOpRun(opRunId string) {
  fake.killOpRunMutex.Lock()
  fake.killOpRunArgsForCall = append(fake.killOpRunArgsForCall, struct {
    opRunId string
  }{opRunId})
  fake.recordInvocation("KillOpRun", []interface{}{opRunId})
  fake.killOpRunMutex.Unlock()
  if fake.KillOpRunStub != nil {
    fake.KillOpRunStub(opRunId)
  }
}

func (fake *FakeApi) KillOpRunCallCount() int {
  fake.killOpRunMutex.RLock()
  defer fake.killOpRunMutex.RUnlock()
  return len(fake.killOpRunArgsForCall)
}

func (fake *FakeApi) KillOpRunArgsForCall(i int) string {
  fake.killOpRunMutex.RLock()
  defer fake.killOpRunMutex.RUnlock()
  return fake.killOpRunArgsForCall[i].opRunId
}

func (fake *FakeApi) ListOpsInCollection() {
  fake.listOpsInCollectionMutex.Lock()
  fake.listOpsInCollectionArgsForCall = append(fake.listOpsInCollectionArgsForCall, struct{}{})
  fake.recordInvocation("ListOpsInCollection", []interface{}{})
  fake.listOpsInCollectionMutex.Unlock()
  if fake.ListOpsInCollectionStub != nil {
    fake.ListOpsInCollectionStub()
  }
}

func (fake *FakeApi) ListOpsInCollectionCallCount() int {
  fake.listOpsInCollectionMutex.RLock()
  defer fake.listOpsInCollectionMutex.RUnlock()
  return len(fake.listOpsInCollectionArgsForCall)
}

func (fake *FakeApi) RunOp(args []string, name string) {
  var argsCopy []string
  if args != nil {
    argsCopy = make([]string, len(args))
    copy(argsCopy, args)
  }
  fake.runOpMutex.Lock()
  fake.runOpArgsForCall = append(fake.runOpArgsForCall, struct {
    args []string
    name string
  }{argsCopy, name})
  fake.recordInvocation("RunOp", []interface{}{argsCopy, name})
  fake.runOpMutex.Unlock()
  if fake.RunOpStub != nil {
    fake.RunOpStub(args, name)
  }
}

func (fake *FakeApi) RunOpCallCount() int {
  fake.runOpMutex.RLock()
  defer fake.runOpMutex.RUnlock()
  return len(fake.runOpArgsForCall)
}

func (fake *FakeApi) RunOpArgsForCall(i int) ([]string, string) {
  fake.runOpMutex.RLock()
  defer fake.runOpMutex.RUnlock()
  return fake.runOpArgsForCall[i].args, fake.runOpArgsForCall[i].name
}

func (fake *FakeApi) SetCollectionDescription(description string) {
  fake.setCollectionDescriptionMutex.Lock()
  fake.setCollectionDescriptionArgsForCall = append(fake.setCollectionDescriptionArgsForCall, struct {
    description string
  }{description})
  fake.recordInvocation("SetCollectionDescription", []interface{}{description})
  fake.setCollectionDescriptionMutex.Unlock()
  if fake.SetCollectionDescriptionStub != nil {
    fake.SetCollectionDescriptionStub(description)
  }
}

func (fake *FakeApi) SetCollectionDescriptionCallCount() int {
  fake.setCollectionDescriptionMutex.RLock()
  defer fake.setCollectionDescriptionMutex.RUnlock()
  return len(fake.setCollectionDescriptionArgsForCall)
}

func (fake *FakeApi) SetCollectionDescriptionArgsForCall(i int) string {
  fake.setCollectionDescriptionMutex.RLock()
  defer fake.setCollectionDescriptionMutex.RUnlock()
  return fake.setCollectionDescriptionArgsForCall[i].description
}

func (fake *FakeApi) SetOpDescription(description string, name string) {
  fake.setOpDescriptionMutex.Lock()
  fake.setOpDescriptionArgsForCall = append(fake.setOpDescriptionArgsForCall, struct {
    description string
    name        string
  }{description, name})
  fake.recordInvocation("SetOpDescription", []interface{}{description, name})
  fake.setOpDescriptionMutex.Unlock()
  if fake.SetOpDescriptionStub != nil {
    fake.SetOpDescriptionStub(description, name)
  }
}

func (fake *FakeApi) SetOpDescriptionCallCount() int {
  fake.setOpDescriptionMutex.RLock()
  defer fake.setOpDescriptionMutex.RUnlock()
  return len(fake.setOpDescriptionArgsForCall)
}

func (fake *FakeApi) SetOpDescriptionArgsForCall(i int) (string, string) {
  fake.setOpDescriptionMutex.RLock()
  defer fake.setOpDescriptionMutex.RUnlock()
  return fake.setOpDescriptionArgsForCall[i].description, fake.setOpDescriptionArgsForCall[i].name
}

func (fake *FakeApi) StreamEvents() {
  fake.streamEventsMutex.Lock()
  fake.streamEventsArgsForCall = append(fake.streamEventsArgsForCall, struct{}{})
  fake.recordInvocation("StreamEvents", []interface{}{})
  fake.streamEventsMutex.Unlock()
  if fake.StreamEventsStub != nil {
    fake.StreamEventsStub()
  }
}

func (fake *FakeApi) StreamEventsCallCount() int {
  fake.streamEventsMutex.RLock()
  defer fake.streamEventsMutex.RUnlock()
  return len(fake.streamEventsArgsForCall)
}

func (fake *FakeApi) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.createCollectionMutex.RLock()
  defer fake.createCollectionMutex.RUnlock()
  fake.createOpMutex.RLock()
  defer fake.createOpMutex.RUnlock()
  fake.killOpRunMutex.RLock()
  defer fake.killOpRunMutex.RUnlock()
  fake.listOpsInCollectionMutex.RLock()
  defer fake.listOpsInCollectionMutex.RUnlock()
  fake.runOpMutex.RLock()
  defer fake.runOpMutex.RUnlock()
  fake.setCollectionDescriptionMutex.RLock()
  defer fake.setCollectionDescriptionMutex.RUnlock()
  fake.setOpDescriptionMutex.RLock()
  defer fake.setOpDescriptionMutex.RUnlock()
  fake.streamEventsMutex.RLock()
  defer fake.streamEventsMutex.RUnlock()
  return fake.invocations
}

func (fake *FakeApi) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Api = new(FakeApi)
