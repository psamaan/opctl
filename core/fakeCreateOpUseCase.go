// This file was generated by counterfeiter
package core

import "sync"

type fakeCreateOpUseCase struct {
  ExecuteStub        func(description string, name string) error
  executeMutex       sync.RWMutex
  executeArgsForCall []struct {
    description string
    name        string
  }
  executeReturns     struct {
                       result1 error
                     }
  invocations        map[string][][]interface{}
  invocationsMutex   sync.RWMutex
}

func (fake *fakeCreateOpUseCase) Execute(description string, name string) error {
  fake.executeMutex.Lock()
  fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
    description string
    name        string
  }{description, name})
  fake.recordInvocation("Execute", []interface{}{description, name})
  fake.executeMutex.Unlock()
  if fake.ExecuteStub != nil {
    return fake.ExecuteStub(description, name)
  } else {
    return fake.executeReturns.result1
  }
}

func (fake *fakeCreateOpUseCase) ExecuteCallCount() int {
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return len(fake.executeArgsForCall)
}

func (fake *fakeCreateOpUseCase) ExecuteArgsForCall(i int) (string, string) {
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return fake.executeArgsForCall[i].description, fake.executeArgsForCall[i].name
}

func (fake *fakeCreateOpUseCase) ExecuteReturns(result1 error) {
  fake.ExecuteStub = nil
  fake.executeReturns = struct {
    result1 error
  }{result1}
}

func (fake *fakeCreateOpUseCase) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return fake.invocations
}

func (fake *fakeCreateOpUseCase) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}
