// This file was generated by counterfeiter
package core

import (
  "sync"
)

type fakeExiter struct {
  ExitStub         func(req ExitReq)
  exitMutex        sync.RWMutex
  exitArgsForCall  []struct {
    req ExitReq
  }
  invocations      map[string][][]interface{}
  invocationsMutex sync.RWMutex
}

func (fake *fakeExiter) Exit(req ExitReq) {
  fake.exitMutex.Lock()
  fake.exitArgsForCall = append(fake.exitArgsForCall, struct {
    req ExitReq
  }{req})
  fake.recordInvocation("Exit", []interface{}{req})
  fake.exitMutex.Unlock()
  if fake.ExitStub != nil {
    fake.ExitStub(req)
  }
}

func (fake *fakeExiter) ExitCallCount() int {
  fake.exitMutex.RLock()
  defer fake.exitMutex.RUnlock()
  return len(fake.exitArgsForCall)
}

func (fake *fakeExiter) ExitArgsForCall(i int) ExitReq {
  fake.exitMutex.RLock()
  defer fake.exitMutex.RUnlock()
  return fake.exitArgsForCall[i].req
}

func (fake *fakeExiter) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.exitMutex.RLock()
  defer fake.exitMutex.RUnlock()
  return fake.invocations
}

func (fake *fakeExiter) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}
