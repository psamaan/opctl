// This file was generated by counterfeiter
package opctlengine

import "sync"

type fakeCompositionRoot struct {
  GetLivenessUseCaseStub           func() getLivenessUseCase
  getLivenessUseCaseMutex          sync.RWMutex
  getLivenessUseCaseArgsForCall    []struct{}
  getLivenessUseCaseReturns        struct {
                                     result1 getLivenessUseCase
                                   }
  GetEventStreamUseCaseStub        func() getEventStreamUseCase
  getEventStreamUseCaseMutex       sync.RWMutex
  getEventStreamUseCaseArgsForCall []struct{}
  getEventStreamUseCaseReturns     struct {
                                     result1 getEventStreamUseCase
                                   }
  KillOpRunUseCaseStub             func() killOpRunUseCase
  killOpRunUseCaseMutex            sync.RWMutex
  killOpRunUseCaseArgsForCall      []struct{}
  killOpRunUseCaseReturns          struct {
                                     result1 killOpRunUseCase
                                   }
  RunOpUseCaseStub                 func() runOpUseCase
  runOpUseCaseMutex                sync.RWMutex
  runOpUseCaseArgsForCall          []struct{}
  runOpUseCaseReturns              struct {
                                     result1 runOpUseCase
                                   }
  invocations                      map[string][][]interface{}
  invocationsMutex                 sync.RWMutex
}

func (fake *fakeCompositionRoot) GetLivenessUseCase() getLivenessUseCase {
  fake.getLivenessUseCaseMutex.Lock()
  fake.getLivenessUseCaseArgsForCall = append(fake.getLivenessUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("GetLivenessUseCase", []interface{}{})
  fake.getLivenessUseCaseMutex.Unlock()
  if fake.GetLivenessUseCaseStub != nil {
    return fake.GetLivenessUseCaseStub()
  } else {
    return fake.getLivenessUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) GetLivenessUseCaseCallCount() int {
  fake.getLivenessUseCaseMutex.RLock()
  defer fake.getLivenessUseCaseMutex.RUnlock()
  return len(fake.getLivenessUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) GetLivenessUseCaseReturns(result1 getLivenessUseCase) {
  fake.GetLivenessUseCaseStub = nil
  fake.getLivenessUseCaseReturns = struct {
    result1 getLivenessUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) GetEventStreamUseCase() getEventStreamUseCase {
  fake.getEventStreamUseCaseMutex.Lock()
  fake.getEventStreamUseCaseArgsForCall = append(fake.getEventStreamUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("GetEventStreamUseCase", []interface{}{})
  fake.getEventStreamUseCaseMutex.Unlock()
  if fake.GetEventStreamUseCaseStub != nil {
    return fake.GetEventStreamUseCaseStub()
  } else {
    return fake.getEventStreamUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) GetEventStreamUseCaseCallCount() int {
  fake.getEventStreamUseCaseMutex.RLock()
  defer fake.getEventStreamUseCaseMutex.RUnlock()
  return len(fake.getEventStreamUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) GetEventStreamUseCaseReturns(result1 getEventStreamUseCase) {
  fake.GetEventStreamUseCaseStub = nil
  fake.getEventStreamUseCaseReturns = struct {
    result1 getEventStreamUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) KillOpRunUseCase() killOpRunUseCase {
  fake.killOpRunUseCaseMutex.Lock()
  fake.killOpRunUseCaseArgsForCall = append(fake.killOpRunUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("KillOpRunUseCase", []interface{}{})
  fake.killOpRunUseCaseMutex.Unlock()
  if fake.KillOpRunUseCaseStub != nil {
    return fake.KillOpRunUseCaseStub()
  } else {
    return fake.killOpRunUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) KillOpRunUseCaseCallCount() int {
  fake.killOpRunUseCaseMutex.RLock()
  defer fake.killOpRunUseCaseMutex.RUnlock()
  return len(fake.killOpRunUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) KillOpRunUseCaseReturns(result1 killOpRunUseCase) {
  fake.KillOpRunUseCaseStub = nil
  fake.killOpRunUseCaseReturns = struct {
    result1 killOpRunUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) RunOpUseCase() runOpUseCase {
  fake.runOpUseCaseMutex.Lock()
  fake.runOpUseCaseArgsForCall = append(fake.runOpUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("RunOpUseCase", []interface{}{})
  fake.runOpUseCaseMutex.Unlock()
  if fake.RunOpUseCaseStub != nil {
    return fake.RunOpUseCaseStub()
  } else {
    return fake.runOpUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) RunOpUseCaseCallCount() int {
  fake.runOpUseCaseMutex.RLock()
  defer fake.runOpUseCaseMutex.RUnlock()
  return len(fake.runOpUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) RunOpUseCaseReturns(result1 runOpUseCase) {
  fake.RunOpUseCaseStub = nil
  fake.runOpUseCaseReturns = struct {
    result1 runOpUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.getLivenessUseCaseMutex.RLock()
  defer fake.getLivenessUseCaseMutex.RUnlock()
  fake.getEventStreamUseCaseMutex.RLock()
  defer fake.getEventStreamUseCaseMutex.RUnlock()
  fake.killOpRunUseCaseMutex.RLock()
  defer fake.killOpRunUseCaseMutex.RUnlock()
  fake.runOpUseCaseMutex.RLock()
  defer fake.runOpUseCaseMutex.RUnlock()
  return fake.invocations
}

func (fake *fakeCompositionRoot) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}
