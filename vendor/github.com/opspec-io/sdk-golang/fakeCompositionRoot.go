// This file was generated by counterfeiter
package opspec

import "sync"

type fakeCompositionRoot struct {
  CreateCollectionUseCaseStub                   func() createCollectionUseCase
  createCollectionUseCaseMutex                  sync.RWMutex
  createCollectionUseCaseArgsForCall            []struct{}
  createCollectionUseCaseReturns                struct {
                                                  result1 createCollectionUseCase
                                                }
  CreateOpUseCaseStub                           func() createOpUseCase
  createOpUseCaseMutex                          sync.RWMutex
  createOpUseCaseArgsForCall                    []struct{}
  createOpUseCaseReturns                        struct {
                                                  result1 createOpUseCase
                                                }
  GetCollectionUseCaseStub                      func() getCollectionUseCase
  getCollectionUseCaseMutex                     sync.RWMutex
  getCollectionUseCaseArgsForCall               []struct{}
  getCollectionUseCaseReturns                   struct {
                                                  result1 getCollectionUseCase
                                                }
  GetOpUseCaseStub                              func() getOpUseCase
  getOpUseCaseMutex                             sync.RWMutex
  getOpUseCaseArgsForCall                       []struct{}
  getOpUseCaseReturns                           struct {
                                                  result1 getOpUseCase
                                                }
  SetCollectionDescriptionUseCaseStub           func() setCollectionDescriptionUseCase
  setCollectionDescriptionUseCaseMutex          sync.RWMutex
  setCollectionDescriptionUseCaseArgsForCall    []struct{}
  setCollectionDescriptionUseCaseReturns        struct {
                                                  result1 setCollectionDescriptionUseCase
                                                }
  SetOpDescriptionUseCaseStub                   func() setOpDescriptionUseCase
  setOpDescriptionUseCaseMutex                  sync.RWMutex
  setOpDescriptionUseCaseArgsForCall            []struct{}
  setOpDescriptionUseCaseReturns                struct {
                                                  result1 setOpDescriptionUseCase
                                                }
  TryResolveDefaultCollectionUseCaseStub        func() tryResolveDefaultCollectionUseCase
  tryResolveDefaultCollectionUseCaseMutex       sync.RWMutex
  tryResolveDefaultCollectionUseCaseArgsForCall []struct{}
  tryResolveDefaultCollectionUseCaseReturns     struct {
                                                  result1 tryResolveDefaultCollectionUseCase
                                                }
  invocations                                   map[string][][]interface{}
  invocationsMutex                              sync.RWMutex
}

func (fake *fakeCompositionRoot) CreateCollectionUseCase() createCollectionUseCase {
  fake.createCollectionUseCaseMutex.Lock()
  fake.createCollectionUseCaseArgsForCall = append(fake.createCollectionUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("CreateCollectionUseCase", []interface{}{})
  fake.createCollectionUseCaseMutex.Unlock()
  if fake.CreateCollectionUseCaseStub != nil {
    return fake.CreateCollectionUseCaseStub()
  } else {
    return fake.createCollectionUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) CreateCollectionUseCaseCallCount() int {
  fake.createCollectionUseCaseMutex.RLock()
  defer fake.createCollectionUseCaseMutex.RUnlock()
  return len(fake.createCollectionUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) CreateCollectionUseCaseReturns(result1 createCollectionUseCase) {
  fake.CreateCollectionUseCaseStub = nil
  fake.createCollectionUseCaseReturns = struct {
    result1 createCollectionUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) CreateOpUseCase() createOpUseCase {
  fake.createOpUseCaseMutex.Lock()
  fake.createOpUseCaseArgsForCall = append(fake.createOpUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("CreateOpUseCase", []interface{}{})
  fake.createOpUseCaseMutex.Unlock()
  if fake.CreateOpUseCaseStub != nil {
    return fake.CreateOpUseCaseStub()
  } else {
    return fake.createOpUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) CreateOpUseCaseCallCount() int {
  fake.createOpUseCaseMutex.RLock()
  defer fake.createOpUseCaseMutex.RUnlock()
  return len(fake.createOpUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) CreateOpUseCaseReturns(result1 createOpUseCase) {
  fake.CreateOpUseCaseStub = nil
  fake.createOpUseCaseReturns = struct {
    result1 createOpUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) GetCollectionUseCase() getCollectionUseCase {
  fake.getCollectionUseCaseMutex.Lock()
  fake.getCollectionUseCaseArgsForCall = append(fake.getCollectionUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("GetCollectionUseCase", []interface{}{})
  fake.getCollectionUseCaseMutex.Unlock()
  if fake.GetCollectionUseCaseStub != nil {
    return fake.GetCollectionUseCaseStub()
  } else {
    return fake.getCollectionUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) GetCollectionUseCaseCallCount() int {
  fake.getCollectionUseCaseMutex.RLock()
  defer fake.getCollectionUseCaseMutex.RUnlock()
  return len(fake.getCollectionUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) GetCollectionUseCaseReturns(result1 getCollectionUseCase) {
  fake.GetCollectionUseCaseStub = nil
  fake.getCollectionUseCaseReturns = struct {
    result1 getCollectionUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) GetOpUseCase() getOpUseCase {
  fake.getOpUseCaseMutex.Lock()
  fake.getOpUseCaseArgsForCall = append(fake.getOpUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("GetOpUseCase", []interface{}{})
  fake.getOpUseCaseMutex.Unlock()
  if fake.GetOpUseCaseStub != nil {
    return fake.GetOpUseCaseStub()
  } else {
    return fake.getOpUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) GetOpUseCaseCallCount() int {
  fake.getOpUseCaseMutex.RLock()
  defer fake.getOpUseCaseMutex.RUnlock()
  return len(fake.getOpUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) GetOpUseCaseReturns(result1 getOpUseCase) {
  fake.GetOpUseCaseStub = nil
  fake.getOpUseCaseReturns = struct {
    result1 getOpUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) SetCollectionDescriptionUseCase() setCollectionDescriptionUseCase {
  fake.setCollectionDescriptionUseCaseMutex.Lock()
  fake.setCollectionDescriptionUseCaseArgsForCall = append(fake.setCollectionDescriptionUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("SetCollectionDescriptionUseCase", []interface{}{})
  fake.setCollectionDescriptionUseCaseMutex.Unlock()
  if fake.SetCollectionDescriptionUseCaseStub != nil {
    return fake.SetCollectionDescriptionUseCaseStub()
  } else {
    return fake.setCollectionDescriptionUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) SetCollectionDescriptionUseCaseCallCount() int {
  fake.setCollectionDescriptionUseCaseMutex.RLock()
  defer fake.setCollectionDescriptionUseCaseMutex.RUnlock()
  return len(fake.setCollectionDescriptionUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) SetCollectionDescriptionUseCaseReturns(result1 setCollectionDescriptionUseCase) {
  fake.SetCollectionDescriptionUseCaseStub = nil
  fake.setCollectionDescriptionUseCaseReturns = struct {
    result1 setCollectionDescriptionUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) SetOpDescriptionUseCase() setOpDescriptionUseCase {
  fake.setOpDescriptionUseCaseMutex.Lock()
  fake.setOpDescriptionUseCaseArgsForCall = append(fake.setOpDescriptionUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("SetOpDescriptionUseCase", []interface{}{})
  fake.setOpDescriptionUseCaseMutex.Unlock()
  if fake.SetOpDescriptionUseCaseStub != nil {
    return fake.SetOpDescriptionUseCaseStub()
  } else {
    return fake.setOpDescriptionUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) SetOpDescriptionUseCaseCallCount() int {
  fake.setOpDescriptionUseCaseMutex.RLock()
  defer fake.setOpDescriptionUseCaseMutex.RUnlock()
  return len(fake.setOpDescriptionUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) SetOpDescriptionUseCaseReturns(result1 setOpDescriptionUseCase) {
  fake.SetOpDescriptionUseCaseStub = nil
  fake.setOpDescriptionUseCaseReturns = struct {
    result1 setOpDescriptionUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) TryResolveDefaultCollectionUseCase() tryResolveDefaultCollectionUseCase {
  fake.tryResolveDefaultCollectionUseCaseMutex.Lock()
  fake.tryResolveDefaultCollectionUseCaseArgsForCall = append(fake.tryResolveDefaultCollectionUseCaseArgsForCall, struct{}{})
  fake.recordInvocation("TryResolveDefaultCollectionUseCase", []interface{}{})
  fake.tryResolveDefaultCollectionUseCaseMutex.Unlock()
  if fake.TryResolveDefaultCollectionUseCaseStub != nil {
    return fake.TryResolveDefaultCollectionUseCaseStub()
  } else {
    return fake.tryResolveDefaultCollectionUseCaseReturns.result1
  }
}

func (fake *fakeCompositionRoot) TryResolveDefaultCollectionUseCaseCallCount() int {
  fake.tryResolveDefaultCollectionUseCaseMutex.RLock()
  defer fake.tryResolveDefaultCollectionUseCaseMutex.RUnlock()
  return len(fake.tryResolveDefaultCollectionUseCaseArgsForCall)
}

func (fake *fakeCompositionRoot) TryResolveDefaultCollectionUseCaseReturns(result1 tryResolveDefaultCollectionUseCase) {
  fake.TryResolveDefaultCollectionUseCaseStub = nil
  fake.tryResolveDefaultCollectionUseCaseReturns = struct {
    result1 tryResolveDefaultCollectionUseCase
  }{result1}
}

func (fake *fakeCompositionRoot) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.createCollectionUseCaseMutex.RLock()
  defer fake.createCollectionUseCaseMutex.RUnlock()
  fake.createOpUseCaseMutex.RLock()
  defer fake.createOpUseCaseMutex.RUnlock()
  fake.getCollectionUseCaseMutex.RLock()
  defer fake.getCollectionUseCaseMutex.RUnlock()
  fake.getOpUseCaseMutex.RLock()
  defer fake.getOpUseCaseMutex.RUnlock()
  fake.setCollectionDescriptionUseCaseMutex.RLock()
  defer fake.setCollectionDescriptionUseCaseMutex.RUnlock()
  fake.setOpDescriptionUseCaseMutex.RLock()
  defer fake.setOpDescriptionUseCaseMutex.RUnlock()
  fake.tryResolveDefaultCollectionUseCaseMutex.RLock()
  defer fake.tryResolveDefaultCollectionUseCaseMutex.RUnlock()
  return fake.invocations
}

func (fake *fakeCompositionRoot) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}
