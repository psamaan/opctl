// This file was generated by counterfeiter
package format

import (
	"sync"
)

type FakeFormat struct {
	FromStub        func(in interface{}) (out []byte, err error)
	fromMutex       sync.RWMutex
	fromArgsForCall []struct {
		in interface{}
	}
	fromReturns struct {
		result1 []byte
		result2 error
	}
	ToStub        func(in []byte, out interface{}) (err error)
	toMutex       sync.RWMutex
	toArgsForCall []struct {
		in  []byte
		out interface{}
	}
	toReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFormat) From(in interface{}) (out []byte, err error) {
	fake.fromMutex.Lock()
	fake.fromArgsForCall = append(fake.fromArgsForCall, struct {
		in interface{}
	}{in})
	fake.recordInvocation("From", []interface{}{in})
	fake.fromMutex.Unlock()
	if fake.FromStub != nil {
		return fake.FromStub(in)
	} else {
		return fake.fromReturns.result1, fake.fromReturns.result2
	}
}

func (fake *FakeFormat) FromCallCount() int {
	fake.fromMutex.RLock()
	defer fake.fromMutex.RUnlock()
	return len(fake.fromArgsForCall)
}

func (fake *FakeFormat) FromArgsForCall(i int) interface{} {
	fake.fromMutex.RLock()
	defer fake.fromMutex.RUnlock()
	return fake.fromArgsForCall[i].in
}

func (fake *FakeFormat) FromReturns(result1 []byte, result2 error) {
	fake.FromStub = nil
	fake.fromReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFormat) To(in []byte, out interface{}) (err error) {
	var inCopy []byte
	if in != nil {
		inCopy = make([]byte, len(in))
		copy(inCopy, in)
	}
	fake.toMutex.Lock()
	fake.toArgsForCall = append(fake.toArgsForCall, struct {
		in  []byte
		out interface{}
	}{inCopy, out})
	fake.recordInvocation("To", []interface{}{inCopy, out})
	fake.toMutex.Unlock()
	if fake.ToStub != nil {
		return fake.ToStub(in, out)
	} else {
		return fake.toReturns.result1
	}
}

func (fake *FakeFormat) ToCallCount() int {
	fake.toMutex.RLock()
	defer fake.toMutex.RUnlock()
	return len(fake.toArgsForCall)
}

func (fake *FakeFormat) ToArgsForCall(i int) ([]byte, interface{}) {
	fake.toMutex.RLock()
	defer fake.toMutex.RUnlock()
	return fake.toArgsForCall[i].in, fake.toArgsForCall[i].out
}

func (fake *FakeFormat) ToReturns(result1 error) {
	fake.ToStub = nil
	fake.toReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFormat) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fromMutex.RLock()
	defer fake.fromMutex.RUnlock()
	fake.toMutex.RLock()
	defer fake.toMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeFormat) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Format = new(FakeFormat)
