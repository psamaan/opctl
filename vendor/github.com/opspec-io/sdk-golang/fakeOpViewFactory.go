// This file was generated by counterfeiter
package opspec

import (
  "sync"

  "github.com/opspec-io/sdk-golang/models"
)

type fakeOpViewFactory struct {
  ConstructStub        func(opBundlePath string) (opView models.OpView, err error)
  constructMutex       sync.RWMutex
  constructArgsForCall []struct {
    opBundlePath string
  }
  constructReturns     struct {
                         result1 models.OpView
                         result2 error
                       }
  invocations          map[string][][]interface{}
  invocationsMutex     sync.RWMutex
}

func (fake *fakeOpViewFactory) Construct(opBundlePath string) (opView models.OpView, err error) {
  fake.constructMutex.Lock()
  fake.constructArgsForCall = append(fake.constructArgsForCall, struct {
    opBundlePath string
  }{opBundlePath})
  fake.recordInvocation("Construct", []interface{}{opBundlePath})
  fake.constructMutex.Unlock()
  if fake.ConstructStub != nil {
    return fake.ConstructStub(opBundlePath)
  } else {
    return fake.constructReturns.result1, fake.constructReturns.result2
  }
}

func (fake *fakeOpViewFactory) ConstructCallCount() int {
  fake.constructMutex.RLock()
  defer fake.constructMutex.RUnlock()
  return len(fake.constructArgsForCall)
}

func (fake *fakeOpViewFactory) ConstructArgsForCall(i int) string {
  fake.constructMutex.RLock()
  defer fake.constructMutex.RUnlock()
  return fake.constructArgsForCall[i].opBundlePath
}

func (fake *fakeOpViewFactory) ConstructReturns(result1 models.OpView, result2 error) {
  fake.ConstructStub = nil
  fake.constructReturns = struct {
    result1 models.OpView
    result2 error
  }{result1, result2}
}

func (fake *fakeOpViewFactory) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.constructMutex.RLock()
  defer fake.constructMutex.RUnlock()
  return fake.invocations
}

func (fake *fakeOpViewFactory) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}
