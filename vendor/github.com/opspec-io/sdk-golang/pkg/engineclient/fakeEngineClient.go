// This file was generated by counterfeiter
package engineclient

import (
	"sync"

	"github.com/opspec-io/sdk-golang/models"
)

type FakeEngineClient struct {
	GetEventStreamStub        func() (stream chan models.Event, err error)
	getEventStreamMutex       sync.RWMutex
	getEventStreamArgsForCall []struct{}
	getEventStreamReturns     struct {
		result1 chan models.Event
		result2 error
	}
	KillOpRunStub        func(req models.KillOpRunReq) (err error)
	killOpRunMutex       sync.RWMutex
	killOpRunArgsForCall []struct {
		req models.KillOpRunReq
	}
	killOpRunReturns struct {
		result1 error
	}
	StartOpRunStub        func(req models.StartOpRunReq) (opRunId string, err error)
	startOpRunMutex       sync.RWMutex
	startOpRunArgsForCall []struct {
		req models.StartOpRunReq
	}
	startOpRunReturns struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEngineClient) GetEventStream() (stream chan models.Event, err error) {
	fake.getEventStreamMutex.Lock()
	fake.getEventStreamArgsForCall = append(fake.getEventStreamArgsForCall, struct{}{})
	fake.recordInvocation("GetEventStream", []interface{}{})
	fake.getEventStreamMutex.Unlock()
	if fake.GetEventStreamStub != nil {
		return fake.GetEventStreamStub()
	} else {
		return fake.getEventStreamReturns.result1, fake.getEventStreamReturns.result2
	}
}

func (fake *FakeEngineClient) GetEventStreamCallCount() int {
	fake.getEventStreamMutex.RLock()
	defer fake.getEventStreamMutex.RUnlock()
	return len(fake.getEventStreamArgsForCall)
}

func (fake *FakeEngineClient) GetEventStreamReturns(result1 chan models.Event, result2 error) {
	fake.GetEventStreamStub = nil
	fake.getEventStreamReturns = struct {
		result1 chan models.Event
		result2 error
	}{result1, result2}
}

func (fake *FakeEngineClient) KillOpRun(req models.KillOpRunReq) (err error) {
	fake.killOpRunMutex.Lock()
	fake.killOpRunArgsForCall = append(fake.killOpRunArgsForCall, struct {
		req models.KillOpRunReq
	}{req})
	fake.recordInvocation("KillOpRun", []interface{}{req})
	fake.killOpRunMutex.Unlock()
	if fake.KillOpRunStub != nil {
		return fake.KillOpRunStub(req)
	} else {
		return fake.killOpRunReturns.result1
	}
}

func (fake *FakeEngineClient) KillOpRunCallCount() int {
	fake.killOpRunMutex.RLock()
	defer fake.killOpRunMutex.RUnlock()
	return len(fake.killOpRunArgsForCall)
}

func (fake *FakeEngineClient) KillOpRunArgsForCall(i int) models.KillOpRunReq {
	fake.killOpRunMutex.RLock()
	defer fake.killOpRunMutex.RUnlock()
	return fake.killOpRunArgsForCall[i].req
}

func (fake *FakeEngineClient) KillOpRunReturns(result1 error) {
	fake.KillOpRunStub = nil
	fake.killOpRunReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEngineClient) StartOpRun(req models.StartOpRunReq) (opRunId string, err error) {
	fake.startOpRunMutex.Lock()
	fake.startOpRunArgsForCall = append(fake.startOpRunArgsForCall, struct {
		req models.StartOpRunReq
	}{req})
	fake.recordInvocation("StartOpRun", []interface{}{req})
	fake.startOpRunMutex.Unlock()
	if fake.StartOpRunStub != nil {
		return fake.StartOpRunStub(req)
	} else {
		return fake.startOpRunReturns.result1, fake.startOpRunReturns.result2
	}
}

func (fake *FakeEngineClient) StartOpRunCallCount() int {
	fake.startOpRunMutex.RLock()
	defer fake.startOpRunMutex.RUnlock()
	return len(fake.startOpRunArgsForCall)
}

func (fake *FakeEngineClient) StartOpRunArgsForCall(i int) models.StartOpRunReq {
	fake.startOpRunMutex.RLock()
	defer fake.startOpRunMutex.RUnlock()
	return fake.startOpRunArgsForCall[i].req
}

func (fake *FakeEngineClient) StartOpRunReturns(result1 string, result2 error) {
	fake.StartOpRunStub = nil
	fake.startOpRunReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeEngineClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getEventStreamMutex.RLock()
	defer fake.getEventStreamMutex.RUnlock()
	fake.killOpRunMutex.RLock()
	defer fake.killOpRunMutex.RUnlock()
	fake.startOpRunMutex.RLock()
	defer fake.startOpRunMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeEngineClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ EngineClient = new(FakeEngineClient)
