// This file was generated by counterfeiter
package docker

import "sync"

type fakePathNormalizer struct {
  NormalizeStub        func(path string) string
  normalizeMutex       sync.RWMutex
  normalizeArgsForCall []struct {
    path string
  }
  normalizeReturns     struct {
                         result1 string
                       }
  invocations          map[string][][]interface{}
  invocationsMutex     sync.RWMutex
}

func (fake *fakePathNormalizer) Normalize(path string) string {
  fake.normalizeMutex.Lock()
  fake.normalizeArgsForCall = append(fake.normalizeArgsForCall, struct {
    path string
  }{path})
  fake.recordInvocation("Normalize", []interface{}{path})
  fake.normalizeMutex.Unlock()
  if fake.NormalizeStub != nil {
    return fake.NormalizeStub(path)
  } else {
    return fake.normalizeReturns.result1
  }
}

func (fake *fakePathNormalizer) NormalizeCallCount() int {
  fake.normalizeMutex.RLock()
  defer fake.normalizeMutex.RUnlock()
  return len(fake.normalizeArgsForCall)
}

func (fake *fakePathNormalizer) NormalizeArgsForCall(i int) string {
  fake.normalizeMutex.RLock()
  defer fake.normalizeMutex.RUnlock()
  return fake.normalizeArgsForCall[i].path
}

func (fake *fakePathNormalizer) NormalizeReturns(result1 string) {
  fake.NormalizeStub = nil
  fake.normalizeReturns = struct {
    result1 string
  }{result1}
}

func (fake *fakePathNormalizer) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.normalizeMutex.RLock()
  defer fake.normalizeMutex.RUnlock()
  return fake.invocations
}

func (fake *fakePathNormalizer) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}
