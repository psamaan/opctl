// This file was generated by counterfeiter
package opspec

import (
	"sync"

	"github.com/opspec-io/sdk-golang/models"
)

type fakeGetEventStreamUseCase struct {
	ExecuteStub        func() (stream chan models.Event, err error)
	executeMutex       sync.RWMutex
	executeArgsForCall []struct{}
	executeReturns     struct {
		result1 chan models.Event
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *fakeGetEventStreamUseCase) Execute() (stream chan models.Event, err error) {
	fake.executeMutex.Lock()
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct{}{})
	fake.recordInvocation("Execute", []interface{}{})
	fake.executeMutex.Unlock()
	if fake.ExecuteStub != nil {
		return fake.ExecuteStub()
	} else {
		return fake.executeReturns.result1, fake.executeReturns.result2
	}
}

func (fake *fakeGetEventStreamUseCase) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *fakeGetEventStreamUseCase) ExecuteReturns(result1 chan models.Event, result2 error) {
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 chan models.Event
		result2 error
	}{result1, result2}
}

func (fake *fakeGetEventStreamUseCase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return fake.invocations
}

func (fake *fakeGetEventStreamUseCase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
