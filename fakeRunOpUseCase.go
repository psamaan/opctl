// This file was generated by counterfeiter
package main

import "sync"

type fakeRunOpUseCase struct {
  ExecuteStub        func(args []string, name string)
  executeMutex       sync.RWMutex
  executeArgsForCall []struct {
    args []string
    name string
  }
  invocations        map[string][][]interface{}
  invocationsMutex   sync.RWMutex
}

func (fake *fakeRunOpUseCase) Execute(args []string, name string) {
  var argsCopy []string
  if args != nil {
    argsCopy = make([]string, len(args))
    copy(argsCopy, args)
  }
  fake.executeMutex.Lock()
  fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
    args []string
    name string
  }{argsCopy, name})
  fake.recordInvocation("Execute", []interface{}{argsCopy, name})
  fake.executeMutex.Unlock()
  if fake.ExecuteStub != nil {
    fake.ExecuteStub(args, name)
  }
}

func (fake *fakeRunOpUseCase) ExecuteCallCount() int {
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return len(fake.executeArgsForCall)
}

func (fake *fakeRunOpUseCase) ExecuteArgsForCall(i int) ([]string, string) {
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return fake.executeArgsForCall[i].args, fake.executeArgsForCall[i].name
}

func (fake *fakeRunOpUseCase) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.executeMutex.RLock()
  defer fake.executeMutex.RUnlock()
  return fake.invocations
}

func (fake *fakeRunOpUseCase) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}
