// This file was generated by counterfeiter
package main

import "sync"

type FakeCli struct {
  RunStub          func(args []string) error
  runMutex         sync.RWMutex
  runArgsForCall   []struct {
    args []string
  }
  runReturns       struct {
                     result1 error
                   }
  invocations      map[string][][]interface{}
  invocationsMutex sync.RWMutex
}

func (fake *FakeCli) Run(args []string) error {
  var argsCopy []string
  if args != nil {
    argsCopy = make([]string, len(args))
    copy(argsCopy, args)
  }
  fake.runMutex.Lock()
  fake.runArgsForCall = append(fake.runArgsForCall, struct {
    args []string
  }{argsCopy})
  fake.recordInvocation("Run", []interface{}{argsCopy})
  fake.runMutex.Unlock()
  if fake.RunStub != nil {
    return fake.RunStub(args)
  } else {
    return fake.runReturns.result1
  }
}

func (fake *FakeCli) RunCallCount() int {
  fake.runMutex.RLock()
  defer fake.runMutex.RUnlock()
  return len(fake.runArgsForCall)
}

func (fake *FakeCli) RunArgsForCall(i int) []string {
  fake.runMutex.RLock()
  defer fake.runMutex.RUnlock()
  return fake.runArgsForCall[i].args
}

func (fake *FakeCli) RunReturns(result1 error) {
  fake.RunStub = nil
  fake.runReturns = struct {
    result1 error
  }{result1}
}

func (fake *FakeCli) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.runMutex.RLock()
  defer fake.runMutex.RUnlock()
  return fake.invocations
}

func (fake *FakeCli) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}
