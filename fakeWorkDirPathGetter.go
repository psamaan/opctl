// This file was generated by counterfeiter
package main

import "sync"

type fakeWorkDirPathGetter struct {
  GetStub          func() (workDirPath string)
  getMutex         sync.RWMutex
  getArgsForCall   []struct{}
  getReturns       struct {
                     result1 string
                   }
  invocations      map[string][][]interface{}
  invocationsMutex sync.RWMutex
}

func (fake *fakeWorkDirPathGetter) Get() (workDirPath string) {
  fake.getMutex.Lock()
  fake.getArgsForCall = append(fake.getArgsForCall, struct{}{})
  fake.recordInvocation("Get", []interface{}{})
  fake.getMutex.Unlock()
  if fake.GetStub != nil {
    return fake.GetStub()
  } else {
    return fake.getReturns.result1
  }
}

func (fake *fakeWorkDirPathGetter) GetCallCount() int {
  fake.getMutex.RLock()
  defer fake.getMutex.RUnlock()
  return len(fake.getArgsForCall)
}

func (fake *fakeWorkDirPathGetter) GetReturns(result1 string) {
  fake.GetStub = nil
  fake.getReturns = struct {
    result1 string
  }{result1}
}

func (fake *fakeWorkDirPathGetter) Invocations() map[string][][]interface{} {
  fake.invocationsMutex.RLock()
  defer fake.invocationsMutex.RUnlock()
  fake.getMutex.RLock()
  defer fake.getMutex.RUnlock()
  return fake.invocations
}

func (fake *fakeWorkDirPathGetter) recordInvocation(key string, args []interface{}) {
  fake.invocationsMutex.Lock()
  defer fake.invocationsMutex.Unlock()
  if fake.invocations == nil {
    fake.invocations = map[string][][]interface{}{}
  }
  if fake.invocations[key] == nil {
    fake.invocations[key] = [][]interface{}{}
  }
  fake.invocations[key] = append(fake.invocations[key], args)
}
